// prisma/schema.prisma
// ðŸ“… Updated: 2025-10-31 05:22 ET

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")           // pooled URL for app runtime
  directUrl = env("DATABASE_DIRECT_URL")    // direct (non-pooler) URL for migrations
}

/* ===============================
   Enums
   =============================== */

enum ClaimStatus {
  PENDING
  PARTIAL
  VERIFIED
  FAILED
}

enum VerifyStatus {
  PENDING
  VERIFIED
  FAILED
}

enum Plan {
  FREE
  LITE
  PRO
  BUSINESS
}

/* Change-history entities */
enum ChangeEntity {
  PROFILE
  FAQ
  SERVICE
}

enum ChangeAction {
  CREATE
  UPDATE
  DELETE
}

/* Profile-level verification status for gating & badge */
enum VerificationLevel {
  UNVERIFIED
  PLATFORM_VERIFIED
  DOMAIN_VERIFIED
}

/* ===============================
   Models
   =============================== */

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  welcomeSentAt       DateTime?

  // Billing / Paywall
  plan                 Plan     @default(FREE)
  planStatus           String   @default("inactive") // active | trialing | past_due | canceled
  stripeCustomerId     String?  @unique
  stripeSubscriptionId String?  @unique
  currentPeriodEnd     DateTime?

  // Auth relations
  accounts      Account[]
  sessions      Session[]

  // Optional 1:1 Profile
  profile       Profile?

  // Verification back-relations
  domainClaims      DomainClaim[]
  platformAccounts  PlatformAccount[]
  bioCodes          BioCode[]

  // Change history
  changeLogs        ChangeLog[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String? @db.Text
  oauth_token        String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Routing / Public URL
  slug        String   @unique

  // Core identity
  displayName String?
  legalName   String?
  entityType  String?

  // Story
  tagline     String?
  bio         String?

  // Anchors
  website     String?
  location    String?
  serviceArea String[]  @default([])

  // Trust & authority
  foundedYear  Int?
  teamSize     Int?
  languages    String[]  @default([])
  pricingModel String?
  hours        String?
  certifications String?

  // Media & authority signals
  press      Json?      // [{ title, url }]
  logoUrl    String?
  imageUrls  String[]   @default([])

  // Platforms & extra links
  handles    Json?      // { youtube, tiktok, ... }
  links      Json?      // [{ label, url }]

  // --- Verified Badge & gating state (existing) ---
  verificationStatus  VerificationLevel @default(UNVERIFIED)
  verificationToken   String?  @unique
  domainVerifiedAt    DateTime?
  platformVerifiedAt  DateTime?
  verifiedPlatforms   Json?    // e.g. {"google": {"channelId":"...", "connectedAt":"..."}}

  // --- NEW: Verification workflow fields used by UI/API ---
  verifyMethod        String?   // "DNS" | "PLATFORM"
  verifyToken         String?   // per-flow token (distinct from verificationToken)
  verifyDomain        String?   // current domain under verification (DNS flow)
  verifyMarker        String?   // current marker for platform bio flow
  verifyCheckedAt     DateTime? // last time we checked verification state

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  faqItems      FAQItem[]
  serviceItems  ServiceItem[]
  changeLogs    ChangeLog[]
}

/* ===============================
   Verification models
   =============================== */

model DomainClaim {
  id             String      @id @default(cuid())
  userId         String
  domain         String      @unique
  txtToken       String
  emailIssued    String?
  emailToken     String?
  dnsVerified    Boolean     @default(false)
  emailVerified  Boolean     @default(false)
  status         ClaimStatus @default(PENDING)
  verifiedAt     DateTime?

  // NEW: timestamps for recency ordering in API
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model PlatformAccount {
  id              String       @id @default(cuid())
  userId          String
  /** Optional link to the current Profile (keeps working even if you add multi-profiles later) */
  profileId       String?
  /** OAuth provider id (e.g., "google", "tiktok", "facebook", "twitter"/"x") */
  provider        String
  /** External account id we verified (e.g., YouTube channelId, TikTok open_id, FB page id, X user id) */
  externalId      String
  /** Human-friendly handle or display name (e.g., @mybrand) */
  handle          String?
  /** Public URL to the verified presence */
  url             String?
  /** Verification status for this linked platform account */
  status          VerifyStatus @default(PENDING)
  verifiedAt      DateTime?

  /** NEW: how this was verified (for OAuth flow it will be "OAUTH") */
  method          String       @default("OAUTH")
  /** NEW: finer-grained context like "google-youtube", "facebook-page", "instagram-graph", "x" */
  platformContext String?
  /** NEW: scopes granted at the time of verification (for auditing / future checks) */
  scopes          String?

  /** NEW: timestamps */
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profile  Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, externalId])
  @@index([userId])
  @@index([profileId])
}

model BioCode {
  id         String       @id @default(cuid())
  userId     String
  platform   String
  profileUrl String
  code       String
  status     VerifyStatus @default(PENDING)
  verifiedAt DateTime?

  // Optional: createdAt for auditability
  createdAt  DateTime     @default(now())

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([platform])
}

/* ===============================
   Content Models
   =============================== */

model FAQItem {
  id         String   @id @default(cuid())
  profileId  String
  position   Int       @default(0)
  question   String
  answer     String
  isPublic   Boolean   @default(true)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([profileId, position])
}

model ServiceItem {
  id          String   @id @default(cuid())
  profileId   String
  position    Int       @default(0)
  name        String
  description String?
  url         String?
  priceMin    Decimal?  @db.Decimal(12, 2)
  priceMax    Decimal?  @db.Decimal(12, 2)
  priceUnit   String?
  currency    String?
  isPublic    Boolean   @default(true)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([profileId, position])
}

model ChangeLog {
  id          String       @id @default(cuid())
  userId      String
  profileId   String
  entity      ChangeEntity
  entityId    String?
  action      ChangeAction
  field       String?
  before      Json?
  after       Json?

  createdAt   DateTime     @default(now())

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profile     Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([profileId, createdAt])
  @@index([userId, createdAt])
}
