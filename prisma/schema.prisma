// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Pooled URL for app runtime
  url       = env("DATABASE_URL")
  // Direct (non-pooler) URL for migrations to avoid advisory-lock timeouts
  directUrl = env("DATABASE_DIRECT_URL")
}

/* ===============================
   Enums
   =============================== */

enum ClaimStatus {
  PENDING
  PARTIAL
  VERIFIED
  FAILED
}

enum VerifyStatus {
  PENDING
  VERIFIED
  FAILED
}

enum Plan {
  FREE
  LITE
  PRO
  BUSINESS
}

/* New enums for change history */
enum ChangeEntity {
  PROFILE
  FAQ
  SERVICE
}

enum ChangeAction {
  CREATE
  UPDATE
  DELETE
}

/* ===============================
   Models
   =============================== */

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  welcomeSentAt DateTime? // one-time welcome flag

  // --- Billing / Paywall ---
  plan                 Plan     @default(FREE)
  planStatus           String   @default("inactive") // active | trialing | past_due | canceled
  stripeCustomerId     String?  @unique
  stripeSubscriptionId String?  @unique
  currentPeriodEnd     DateTime?

  // Auth relations
  accounts      Account[]
  sessions      Session[]

  // Optional 1:1 Profile
  profile       Profile?

  // ✅ Verification back-relations
  domainClaims      DomainClaim[]
  platformAccounts  PlatformAccount[]
  bioCodes          BioCode[]

  // Change history
  changeLogs        ChangeLog[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String? @db.Text
  oauth_token        String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // -------- Routing / Public URL --------
  slug        String   @unique // ✅ required for /p/[slug] public page

  // -------- Core identity --------
  displayName String?
  legalName   String?
  entityType  String?   // "Business" | "Local Service" | "Organization" | "Creator / Person"

  // -------- Story --------
  tagline     String?
  bio         String?

  // -------- Anchors --------
  website     String?
  location    String?
  serviceArea String[]  @default([]) // ✅ default empty array

  // -------- Trust & authority --------
  foundedYear Int?
  teamSize    Int?
  languages   String[]  @default([]) // ✅ default empty array
  pricingModel String?
  hours       String?

  certifications String?

  // -------- Media & authority signals --------
  press      Json?      // [{ title, url }]
  logoUrl    String?
  imageUrls  String[]   @default([]) // ✅ default empty array

  // -------- Platforms & extra links --------
  handles    Json?      // { youtube, tiktok, ... }
  links      Json?      // [{ label, url }]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  faqItems      FAQItem[]
  serviceItems  ServiceItem[]
  changeLogs    ChangeLog[]
}

// ===============================
// ✅ Verification models
// ===============================

model DomainClaim {
  id             String      @id @default(cuid())
  userId         String
  domain         String      @unique
  txtToken       String
  emailIssued    String?
  emailToken     String?
  dnsVerified    Boolean     @default(false)
  emailVerified  Boolean     @default(false)
  status         ClaimStatus @default(PENDING)
  verifiedAt     DateTime?

  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model PlatformAccount {
  id         String       @id @default(cuid())
  userId     String
  provider   String       // 'google'|'instagram'|'tiktok'|'substack'|'etsy'|'youtube'
  externalId String
  handle     String?
  url        String?
  status     VerifyStatus @default(PENDING)
  verifiedAt DateTime?

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, externalId])
  @@index([userId])
}

model BioCode {
  id         String       @id @default(cuid())
  userId     String
  platform   String
  profileUrl String
  code       String
  status     VerifyStatus @default(PENDING)
  verifiedAt DateTime?

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([platform])
}

/* ===============================
   Content Models: FAQ, Service, ChangeLog
   =============================== */

model FAQItem {
  id         String   @id @default(cuid())
  profileId  String
  position   Int       @default(0)
  question   String
  answer     String
  isPublic   Boolean   @default(true)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([profileId, position])
}

model ServiceItem {
  id          String   @id @default(cuid())
  profileId   String
  position    Int       @default(0)
  name        String
  description String?
  url         String?
  priceMin    Decimal?  @db.Decimal(12, 2)
  priceMax    Decimal?  @db.Decimal(12, 2)
  priceUnit   String?
  currency    String?
  isPublic    Boolean   @default(true)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([profileId, position])
}

model ChangeLog {
  id          String       @id @default(cuid())
  userId      String
  profileId   String
  entity      ChangeEntity
  entityId    String?
  action      ChangeAction
  field       String?
  before      Json?
  after       Json?

  createdAt   DateTime     @default(now())

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profile     Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([profileId, createdAt])
  @@index([userId, createdAt])
}
