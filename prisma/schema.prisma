// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  welcomeSentAt DateTime? // one-time welcome flag

  accounts      Account[]
  sessions      Session[]

  // Optional 1:1 Profile
  profile       Profile?

  // ✅ New back-relations for verification flows
  domainClaims      DomainClaim[]
  platformAccounts  PlatformAccount[]
  bioCodes          BioCode[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String? @db.Text
  oauth_token        String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // -------- Core identity --------
  displayName String?
  legalName   String?
  entityType  String?   // "Business" | "Local Service" | "Organization" | "Creator / Person"

  // -------- Story --------
  tagline     String?
  bio         String?

  // -------- Anchors --------
  website     String?
  location    String?
  serviceArea String[]  // ["NJ","NY","PA"]

  // -------- Trust & authority --------
  foundedYear Int?
  teamSize    Int?
  languages   String[]  // ["English","Spanish"]
  pricingModel String?
  hours       String?

  certifications String?

  // -------- Media & authority signals --------
  press      Json?      // [{ title, url }]
  logoUrl    String?
  imageUrls  String[]   // up to 3 urls

  // -------- Platforms & extra links --------
  handles    Json?      // { youtube, tiktok, ... }
  // Note: Prisma can't set a default for Json in schema; you previously set DB default via SQL.
  // Making this nullable avoids 500s if API sends null; API also coerces to [].
  links      Json?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ===============================
// ✅ Verification models (unchanged)
// ===============================

model DomainClaim {
  id             String      @id @default(cuid())
  userId         String
  domain         String      @unique
  txtToken       String      // random token user publishes in DNS TXT
  emailIssued    String?     // the domain email we sent verification to
  emailToken     String?     // click-through token we emailed
  dnsVerified    Boolean     @default(false)
  emailVerified  Boolean     @default(false)
  status         ClaimStatus @default(PENDING)
  verifiedAt     DateTime?

  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model PlatformAccount {
  id         String       @id @default(cuid())
  userId     String
  provider   String       // 'google'|'instagram'|'tiktok'|'substack'|'etsy'|'youtube'
  externalId String       // stable platform id (e.g., Google sub, YouTube channel id)
  handle     String?
  url        String?
  status     VerifyStatus @default(PENDING)
  verifiedAt DateTime?

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Enables: where: { provider_externalId: { provider, externalId } }
  @@unique([provider, externalId])
  @@index([userId])
}

model BioCode {
  id         String       @id @default(cuid())
  userId     String
  platform   String       // 'instagram'|'tiktok'|'substack'|'etsy'|'youtube'
  profileUrl String
  code       String       // randomized phrase user must place in bio
  status     VerifyStatus @default(PENDING)
  verifiedAt DateTime?

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([platform])
}

enum ClaimStatus {
  PENDING
  PARTIAL
  VERIFIED
  FAILED
}

enum VerifyStatus {
  PENDING
  VERIFIED
  FAILED
}
